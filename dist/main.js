!function(t){var e={};function i(s){if(e[s])return e[s].exports;var h=e[s]={i:s,l:!1,exports:{}};return t[s].call(h.exports,h,h.exports,i),h.l=!0,h.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var h in t)i.d(s,h,function(e){return t[e]}.bind(null,h));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=2)}([function(t,e,i){},function(t,e,i){},function(t,e,i){"use strict";i.r(e);i(0),i(1);function s(t){return t+"px"}class h{constructor(t,e,i,s,h,n){this.appEl=t,this.v_ratio=s,this.h_ratio=h,this.el=document.createElement("div"),this.appEl.appendChild(this.el),this.el.className="wall",this.height=0,this.width=20*s,this.x=e,this.y=n,this.wallHeight=i,this.preRender()}preRender(){this.el.style.left=0,this.el.style.top=0,this.el.style.position="fixed",this.el.style.width=this.width,this.el.style.height=this.wallHeight}destroy(){this.appEl.removeChild(this.el)}update(t,e){const i=7*e*this.v_ratio;this.x<t+400*this.h_ratio&&this.height<this.wallHeight&&(this.y=this.y-i,this.height=this.height+i)}render(){this.el.style.transform=`translate(${this.x}px, ${this.y}px)`}}function n(t,[e,i]){return t>e&&t<i}function r(t,e){const{x:i,y:s,width:h,height:r}=t,{x:l,y:o,width:a,height:d}=e,m=i+h,c=s,y=s+r,u=l,g=o,b=[i,m],p=[u,l+a],w=[c,y],f=[g,o+d];let _=!1,v=!1;return(n(i,p)||n(m,p)||n(u,b))&&(_=!0),(n(c,f)||n(y,f)||n(g,w))&&(v=!0),_&&v}const l=document.getElementById("app");class o{constructor(t,e,i,s,h){this.el=document.createElement("div"),l.append(this.el),this.el.className="tree",this.height=i,this.width=i,this.x=t,this.y=s-this.height-20*h}destroy(){this.el.remove()}render(){this.el.style.height=s(this.height),this.el.style.width=s(this.width),this.el.style.transform=`translate(${this.x}px, ${this.y}px)`}}const a=document.getElementById("app");let d=new class{constructor(t){this.el=document.createElement("div"),t.append(this.el),this.el.className="bee"}restart({h_ratio:t,v_ratio:e}){this.x=100*t,this.y=100*e,this.height=150*e,this.width=this.height,this.direction="RIGHT",this.el.style.width=s(this.width),this.el.style.height=s(this.height),this.el.style.left=0,this.el.style.top=0,this.lose=!1,this.win=!1}getCollisionZone(){const t=this.width/2,e=this.height/2;return{x:this.x+(this.width-t)/2,y:this.y+(this.height-e)/2,width:t,height:e}}render(){this.el.style.transform=`translate(${this.x}px, ${this.y}px)`,this.win?this.el.className="bee buzzy-win":"RIGHT"===this.direction?this.lose?this.el.className="bee right-lose":this.el.className="bee right":this.lose?this.el.className="bee left-lose":this.el.className="bee left"}}(a),m=new class{constructor(t){this.el=document.createElement("div"),this.el.className="bird",t.appendChild(this.el)}hide(){this.el.style.visibility="hidden"}restart({h_ratio:t,v_ratio:e,birdSpeed:i}){this.h_ratio=t,this.v_ratio=e,this.x=-100*this.h_ratio,this.y=100+this.v_ratio,this.height=100*this.v_ratio,this.width=this.height,this.y_increment=i*this.v_ratio,this.x_increment=i*this.h_ratio,this.el.style.width=this.width+"px",this.el.style.height=this.height+"px",this.el.style.visibility="visible"}update(t,e,i){let s=0*this.v_ratio,h=200*this.v_ratio;this.y<s?(this.y=s,this.y_increment=-1*this.y_increment):this.y>h?(this.y=h,this.y_increment=-1*this.y_increment):this.y=this.y+i*this.y_increment,this.x+this.width<t?this.x=t+e+100*this.h_ratio:this.x=this.x-i*this.x_increment}getCollisionZone(){const t=this.width/2,e=this.height/2;return{x:this.x+(this.width-t)/2,y:this.y+(this.height-e)/2,width:t,height:e}}render(){this.el.style.transform=`translate(${this.x}px, ${this.y}px)`}}(a),c=new class{constructor(t){this.appEl=t,this.walls=[]}restart({h_ratio:t,v_ratio:e,numberOfWalls:i,totalWidth:s,screenHeight:h}){this.numberOfWalls=i,this.totalWidth=s,this.screenHeight=h,this.v_ratio=e,this.h_ratio=t,this.walls.forEach(t=>{t.destroy()}),this.createWalls()}update(t,e){this.walls.forEach(i=>{i.update(t,e)})}createWalls(){this.walls=[];const t=300*this.h_ratio,e=1e3*this.h_ratio,i=.6*this.screenHeight,s=(this.totalWidth-t-e)/this.numberOfWalls;let n=t;for(let t=0;t<this.numberOfWalls;t++){let t=Math.floor(Math.random()*s+n);this.walls.push(new h(this.appEl,t,i,this.v_ratio,this.h_ratio,this.screenHeight)),n+=s}}checkForCollisions(t){return this.walls.reduce((e,i)=>e||r(t,i),!1)}render(){this.walls.forEach(t=>{t.render()})}}(a),y=new class{constructor(){this.trees=[]}restart({v_ratio:t,numberOfTrees:e,screenHeight:i,totalWidth:s}){this.trees.forEach(t=>{t.destroy()}),this.trees=[],this.numberOfTrees=e,this.totalWidth=s,this.screenHeight=i,this.createTrees(t)}createTrees(t){const e=this.totalWidth/this.numberOfTrees;for(let i=0;i<this.numberOfTrees;i++){let s=Math.floor(Math.random()*e+e*i);const h=100*t,n=h;this.trees.push(new o(s,n,h,this.screenHeight,t))}}render(){this.trees.forEach(t=>{t.render()})}},u=new class{constructor(t){this.hiveEl=document.createElement("div"),this.hiveEl.className="hive",t.append(this.hiveEl),this.mummyBeeEl=document.createElement("div"),this.mummyBeeEl.className="mrs-bee",t.append(this.mummyBeeEl),this.grassEl=document.createElement("div"),this.grassEl.className="grass",t.append(this.grassEl),this.bunnyEl=document.createElement("div"),this.bunnyEl.className="bunny",t.append(this.bunnyEl),this.wormBirdEl=document.createElement("div"),this.wormBirdEl.className="bird-with-worm",t.append(this.wormBirdEl)}restart({h_ratio:t,v_ratio:e,screenHeight:i,sceneWidth:s}){this.grassHeight=20*e,this.hiveHeight=500*e,this.hiveWidth=this.hiveHeight,this.hive_left=s-this.hiveWidth+50*e,this.hive_top=i-(this.hiveHeight+this.grassHeight)+4,this.mummyBeeHeight=150*e,this.mummyBeeWidth=this.mummyBeeHeight,this.mummyBee_right=200*e,this.mummyBee_top=200*e,this.bunnyHeight=80*e,this.bunnyWidth=this.bunnyHeight,this.bunny_top=i-(this.bunnyHeight+this.grassHeight+4),this.bunnyLeft=500*t,this.wormBirdHeight=50*e,this.wormBirdWidth=this.wormBirdHeight,this.wormBird_top=i-(this.wormBirdHeight+this.grassHeight),this.wormBirdLeft=3e3*t,this.render()}getCollisionZone(){return{x:this.hive_left,y:this.hive_top,width:this.hiveWidth,height:this.hiveHeight}}render(){this.hiveEl.style.height=s(this.hiveHeight),this.hiveEl.style.width=s(this.hiveWidth),this.hiveEl.style.left=s(this.hive_left),this.hiveEl.style.top=s(this.hive_top),this.mummyBeeEl.style.height=s(this.mummyBeeHeight),this.mummyBeeEl.style.width=s(this.mummyBeeWidth),this.mummyBeeEl.style.right=s(this.mummyBee_right),this.mummyBeeEl.style.top=s(this.mummyBee_top),this.wormBirdEl.style.height=s(this.wormBirdHeight),this.wormBirdEl.style.width=s(this.wormBirdWidth),this.wormBirdEl.style.left=s(this.wormBirdLeft),this.wormBirdEl.style.top=s(this.wormBird_top),this.bunnyEl.style.top=s(this.bunny_top),this.bunnyEl.style.width=s(this.bunnyWidth),this.bunnyEl.style.height=s(this.bunnyHeight),this.bunnyEl.style.left=s(this.bunnyLeft),this.grassEl.style.bottom=0,this.grassEl.style.height=s(this.grassHeight)}}(a),g=new class{constructor(){this.el=document.querySelector("#progress-bar"),this.el.style.visibility="hidden"}restart({winningLine:t}){this.percentage=0,this.winningLine=t}update(t){this.percentage=t/this.winningLine*100}render(){this.el.style.visibility="visible",this.el.style.backgroundImage=`linear-gradient(to right, white, white ${this.percentage}%, transparent ${this.percentage}%)`}},b=new class{constructor(){this.el=document.getElementById("clock"),this.el.style.visibility="hidden",this.time=0}update(t){this.time=t}render(){this.el.style.visibility="visible";let t=Math.max(0,Math.floor(this.time/10)).toString().padStart(4,"0"),e=t.slice(0,2),i=t.slice(2,4);this.el.textContent=`${e}:${i}`}},p=new class{constructor(){this.media=document.getElementById("audio")}play(){this.media.play()}pause(){this.media.pause()}};new class{constructor(t,e,i,s,h,n,r,l,o,a){this.el=t,this.levels=o,this.bird=e,this.buzzy=i,this.clock=s,this.progressBar=h,this.trees=n,this.walls=r,this.staticComponents=l,this.musicManager=a,function(t,e){document.getElementById("start-expert-button").addEventListener("click",()=>{t.startGame(e.expert)}),document.getElementById("start-beginner-button").addEventListener("click",()=>{t.startGame(e.beginner)}),document.getElementById("start-intermediate-button").addEventListener("click",()=>{t.startGame(e.intermediate)}),document.getElementById("restart-expert-button").addEventListener("click",()=>{t.startGame(e.expert)}),document.getElementById("restart-beginner-button").addEventListener("click",()=>{t.startGame(e.beginner)}),document.getElementById("restart-intermediate-button").addEventListener("click",()=>{t.startGame(e.intermediate)}),document.getElementById("replay-expert-button").addEventListener("click",()=>{t.startGame(e.expert)}),document.getElementById("replay-beginner-button").addEventListener("click",()=>{t.startGame(e.beginner)}),document.getElementById("replay-intermediate-button").addEventListener("click",()=>{t.startGame(e.intermediate)})}(this,this.levels),document.addEventListener("keydown",t=>{39==t.keyCode?this.rightKeyDown=!0:37==t.keyCode?this.leftKeyDown=!0:40==t.keyCode?this.downKeyDown=!0:38==t.keyCode&&(this.upKeyDown=!0)}),document.addEventListener("keyup",t=>{39==t.keyCode?this.rightKeyDown=!1:37==t.keyCode?this.leftKeyDown=!1:40==t.keyCode?this.downKeyDown=!1:38==t.keyCode&&(this.upKeyDown=!1)})}startGame({timeLimit:t,numberOfTrees:e,numberOfWalls:i,birdSpeed:h}){this.screenWidth=window.innerWidth,this.screenHeight=this.el.offsetHeight,this.h_ratio=this.screenWidth/1280,this.v_ratio=this.screenHeight/509,this.totalWidth=12e3*this.h_ratio,this.leftEdge=0,this.winningLine=this.totalWidth-this.screenWidth/2,this._h_increment=10*this.h_ratio,this._v_increment=5*this.h_ratio,this.max_x_buzzy_vp=this.screenWidth/3,this.timeLimit=t,this.runningTimeStart=0,this.rightKeyDown=!1,this.leftKeyDown=!1,this.downKeyDown=!1,this.upKeyDown=!1,this.reasonForLosing="",this.birdIsOn=!1,this.el.style.width=s(this.totalWidth),this.el.style.visibility="visible",this.buzzy.restart({h_ratio:this.h_ratio,v_ratio:this.v_ratio}),this.progressBar.restart({winningLine:this.winningLine}),this.trees.restart({numberOfTrees:e,screenHeight:this.screenHeight,totalWidth:this.totalWidth,v_ratio:this.v_ratio}),this.staticComponents.restart({v_ratio:this.v_ratio,h_ratio:this.h_ratio,screenHeight:this.screenHeight,sceneWidth:this.totalWidth}),this.walls.restart({numberOfWalls:i,h_ratio:this.h_ratio,v_ratio:this.v_ratio,totalWidth:this.totalWidth,screenHeight:this.screenHeight}),this.bird.restart({birdSpeed:h,h_ratio:this.h_ratio,v_ratio:this.v_ratio}),this.hideBanners(),this.musicManager.play(),window.requestAnimationFrame(this.handleFrame.bind(this))}showIntroScreen(){this.showStartBanner()}handleFrame(t){this.runningTimeStart||(this.runningTimeStart=t);let e=16;this.lastTimestamp&&(e=t-this.lastTimestamp);this.refreshRatio=1,this.h_increment=1*this._h_increment,this.v_increment=1*this._v_increment,this.lastTimestamp=t;const i=t-this.runningTimeStart,s=this.timeLimit-i,h=this.checkForCollisions();r(this.buzzy.getCollisionZone(),this.staticComponents.getCollisionZone())?(this.showWinBanner(),this.buzzy.win=!0,this.bird.hide()):h?(this.buzzy.lose=!0,this.reasonForLosing=h,this.showLoseBanner()):s<0?(this.buzzy.lose=!0,this.reasonForLosing="Watch out for your time!",this.showLoseBanner()):requestAnimationFrame(this.handleFrame.bind(this)),this.clock.update(s),this.rightKeyDown&&this.handleRightKey(),this.leftKeyDown&&this.handleLeftKey(),this.downKeyDown&&this.handleDownKey(),this.upKeyDown&&this.handleUpKey(),this.birdIsOn?this.bird.update(this.leftEdge,this.screenWidth,this.refreshRatio):this.buzzy.x>this.screenWidth/3&&(this.birdIsOn=!0),this.walls.update(this.buzzy.x,1),this.progressBar.update(this.buzzy.x),this.render()}render(){this.buzzy.render(),this.bird.render(),this.trees.render(),this.walls.render(),this.progressBar.render(),this.clock.render(),this.el.style.transform=`translateX(-${this.leftEdge}px)`}handleLeftKey(){this.buzzy.x-this.h_increment>this.leftEdge&&(this.buzzy.x=this.buzzy.x-this.h_increment,this.buzzy.direction="LEFT")}handleRightKey(){const t=this.leftEdge,e=(this.totalWidth,this.buzzy.x),i=this.buzzy.width;let s;t+this.h_increment+this.screenWidth<this.totalWidth?(s=t+this.max_x_buzzy_vp,e+this.h_increment>s&&(this.leftEdge=t+this.h_increment),this.buzzy.x=e+this.h_increment,this.buzzy.direction="RIGHT"):(s=t+this.screenWidth,e+i+this.h_increment<=s&&(this.buzzy.x=e+this.h_increment,this.buzzy.direction="RIGHT"))}handleUpKey(){const t=this.buzzy.y;t-this.v_increment<0?this.buzzy.y=0:this.buzzy.y=t-this.v_increment}handleDownKey(){const t=this.screenHeight-this.buzzy.height;this.buzzy.y+this.v_increment>t?this.buzzy.y=t:this.buzzy.y=this.buzzy.y+this.v_increment}showStartBanner(){document.getElementById("start-banner").style.display="flex"}showWinBanner(){document.getElementById("win-banner").style.display="flex"}showLoseBanner(){const t=document.getElementById("lose-banner");t.querySelector(".message").textContent=this.reasonForLosing,t.style.display="flex"}hideBanners(){const t=document.getElementById("start-banner"),e=document.getElementById("win-banner"),i=document.getElementById("lose-banner");t.style.display="none",e.style.display="none",i.style.display="none"}checkForCollisions(){const t=r(this.buzzy.getCollisionZone(),this.bird.getCollisionZone());let e;return this.walls.checkForCollisions(this.buzzy.getCollisionZone())&&(e=function(){const t=["Watch out for Walls!","Watch out for Walls!","Watch out for Walls!","Walls, DUHH!","Watch out for Walls!","Watch out for Walls!"];return t[Math.floor(Math.random()*t.length)]}()),t&&(e="Watch out for birds!"),e}}(a,m,d,b,g,y,c,u,{beginner:{numberOfTrees:5,numberOfWalls:4,timeLimit:5e4,birdSpeed:1},intermediate:{numberOfTrees:5,numberOfWalls:10,timeLimit:3e4,birdSpeed:3},expert:{numberOfTrees:5,numberOfWalls:14,timeLimit:2e4,birdSpeed:5}},p).showIntroScreen()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,